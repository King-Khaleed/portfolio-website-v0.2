import { Suspense } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { NftCertificate, NftCertificateCard } from '@/components/quiz/nft-certificate';
import { generatePersonalizedExplanation } from '@/ai/flows/personalized-quiz-explanations';
import { MAX_SCORE } from '@/lib/quiz-data';
import type { QuizTier } from '@/lib/types';
import Link from 'next/link';
import { Bot, Download, RotateCcw } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';

type SearchParams = {
  personalPreferencesScore?: string;
  webDevelopmentScore?: string;
  businessUnderstandingScore?: string;
  web3KnowledgeScore?: string;
};

function getQuizTier(score: number): QuizTier {
  const percentage = (score / MAX_SCORE) * 100;
  if (percentage <= 40) return 'Apprentice Wizard';
  if (percentage <= 70) return 'Digital Sorcerer';
  if (percentage <= 90) return 'Web3 Archmage';
  return 'Legendary Tech Wizard';
}

function ResultContent({ searchParams }: { searchParams: SearchParams }) {
  const personalPreferencesScore = parseInt(searchParams.personalPreferencesScore || '0', 10);
  const webDevelopmentScore = parseInt(searchParams.webDevelopmentScore || '0', 10);
  const businessUnderstandingScore = parseInt(searchParams.businessUnderstandingScore || '0', 10);
  const web3KnowledgeScore = parseInt(searchParams.web3KnowledgeScore || '0', 10);

  const totalScore = personalPreferencesScore + webDevelopmentScore + businessUnderstandingScore + web3KnowledgeScore;
  const tier = getQuizTier(totalScore);

  return (
    <div className="flex flex-col items-center gap-8">
      <div className="text-center">
        <p className="text-lg font-medium text-accent">Your Digital Magic Level</p>
        <h1 className="text-4xl md:text-5xl font-headline font-bold mt-2">{tier}</h1>
        <p className="mt-4 text-lg text-muted-foreground">
          You scored {totalScore} out of {MAX_SCORE} points.
        </p>
      </div>

      <div className="w-full grid grid-cols-1 lg:grid-cols-2 gap-8">
        <NftCertificateCard tier={tier} />

        <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
          <CardHeader>
            <div className="flex items-center gap-2">
              <Bot className="h-6 w-6 text-accent" />
              <CardTitle className="font-headline text-2xl">AI-Powered Analysis</CardTitle>
            </div>
            <CardDescription>
              Here's a personalized explanation of your results, generated by the Web3 Wizard's AI companion.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Suspense fallback={<ExplanationSkeleton />}>
              <Explanation
                personalPreferencesScore={personalPreferencesScore}
                webDevelopmentScore={webDevelopmentScore}
                businessUnderstandingScore={businessUnderstandingScore}
                web3KnowledgeScore={web3KnowledgeScore}
              />
            </Suspense>
          </CardContent>
        </Card>
      </div>

      <div className="text-center mt-4">
        <p className="text-lg">Ready to bring your project to life?</p>
        <div className="flex gap-4 mt-4 justify-center">
            <Button asChild size="lg">
                <Link href="/contact">Contact the Wizard</Link>
            </Button>
            <Button asChild variant="outline" size="lg">
                <Link href="/quiz">
                <RotateCcw className="mr-2 h-4 w-4" /> Take Quiz Again
                </Link>
            </Button>
        </div>
      </div>
    </div>
  );
}

async function Explanation(scores: { [key: string]: number }) {
  const input = {
    personalPreferencesScore: scores.personalPreferencesScore,
    webDevelopmentScore: scores.webDevelopmentScore,
    businessUnderstandingScore: scores.businessUnderstandingScore,
    web3KnowledgeScore: scores.web3KnowledgeScore,
  };
  const result = await generatePersonalizedExplanation(input);

  return <p className="text-muted-foreground whitespace-pre-wrap">{result.explanation}</p>;
}

function ExplanationSkeleton() {
  return (
    <div className="space-y-3">
      <Skeleton className="h-4 w-full" />
      <Skeleton className="h-4 w-full" />
      <Skeleton className="h-4 w-4/5" />
    </div>
  )
}


export default function ResultsPage({ searchParams }: { searchParams: SearchParams }) {
  return <ResultContent searchParams={searchParams} />;
}
