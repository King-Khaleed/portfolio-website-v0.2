-- supabase-setup.sql
--
-- This script sets up the entire Supabase database for the Wizardfolio project.
--
-- Setup Instructions:
-- 1. Create a new project in Supabase.
-- 2. Go to the "SQL Editor" section in your Supabase dashboard.
-- 3. Copy the entire content of this file.
-- 4. Paste it into the SQL Editor.
-- 5. Run the query.
--
-- This will create all tables, relationships, storage buckets, and security policies,
-- and it will populate the database with the initial data from your project.
-- After running this, you'll need to update your Next.js application's
-- environment variables (`.env.local`) with your new Supabase Project URL and Anon Key.


-- =============================================
-- SECTION 1: DATABASE TABLES
-- =============================================
-- This section creates all the necessary tables to store the application's data.

-- Table for blog categories
CREATE TABLE IF NOT EXISTS blog_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE blog_categories IS 'Stores the different categories for blog posts.';

-- Table for blog posts
CREATE TABLE IF NOT EXISTS blog_posts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    slug TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    content TEXT,
    image_url TEXT,
    image_hint TEXT,
    category_id BIGINT REFERENCES blog_categories(id),
    date DATE NOT NULL,
    reading_time INT,
    meta_description TEXT,
    meta_keywords TEXT[],
    is_published BOOLEAN DEFAULT true NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE blog_posts IS 'Stores individual blog posts.';
CREATE INDEX IF NOT EXISTS idx_blog_posts_slug ON blog_posts(slug);
CREATE INDEX IF NOT EXISTS idx_blog_posts_category_id ON blog_posts(category_id);

-- Table for portfolio projects
CREATE TABLE IF NOT EXISTS portfolio_projects (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    image_url TEXT,
    image_hint TEXT,
    tags TEXT[],
    "link" TEXT,
    display_order INT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE portfolio_projects IS 'Stores portfolio project information.';


-- Table for quiz responses
CREATE TABLE IF NOT EXISTS quiz_responses (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    personal_preferences_score INT,
    web_development_score INT,
    business_understanding_score INT,
    web3_knowledge_score INT,
    total_score INT,
    quiz_tier TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE quiz_responses IS 'Stores results from user quiz submissions.';

-- Table for contact form submissions
CREATE TABLE IF NOT EXISTS contact_submissions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    company TEXT,
    message TEXT,
    ai_summary TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE contact_submissions IS 'Stores submissions from the contact form.';


-- =============================================
-- SECTION 2: STORAGE BUCKETS
-- =============================================
-- This section creates storage buckets for handling file uploads.

-- Storage for Blog Post featured images
INSERT INTO storage.buckets (id, name, public)
VALUES ('blog_images', 'blog_images', true)
ON CONFLICT (id) DO NOTHING;
COMMENT ON BUCKET blog_images IS 'Stores featured images for blog posts.';

-- Storage for Portfolio Project images
INSERT INTO storage.buckets (id, name, public)
VALUES ('portfolio_images', 'portfolio_images', true)
ON CONFLICT (id) DO NOTHING;
COMMENT ON BUCKET portfolio_images IS 'Stores images for portfolio projects.';


-- =============================================
-- SECTION 3: AUTOMATION & FUNCTIONS
-- =============================================
-- This section creates functions and triggers for database automation.

-- Function to update the `updated_at` timestamp
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for blog_posts table
DROP TRIGGER IF EXISTS on_blog_posts_update ON blog_posts;
CREATE TRIGGER on_blog_posts_update
BEFORE UPDATE ON blog_posts
FOR EACH ROW EXECUTE PROCEDURE handle_updated_at();

-- Trigger for portfolio_projects table
DROP TRIGGER IF EXISTS on_portfolio_projects_update ON portfolio_projects;
CREATE TRIGGER on_portfolio_projects_update
BEFORE UPDATE ON portfolio_projects
FOR EACH ROW EXECUTE PROCEDURE handle_updated_at();


-- =============================================
-- SECTION 4: ROW LEVEL SECURITY (RLS)
-- =============================================
-- This section enables RLS and sets up policies for data access.

-- Enable RLS for all tables
ALTER TABLE blog_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE blog_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE portfolio_projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE quiz_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE contact_submissions ENABLE ROW LEVEL SECURITY;

-- Policies for `blog_categories`
DROP POLICY IF EXISTS "Public read access for blog categories" ON blog_categories;
CREATE POLICY "Public read access for blog categories" ON blog_categories FOR SELECT USING (true);
DROP POLICY IF EXISTS "Admins can manage blog categories" ON blog_categories;
CREATE POLICY "Admins can manage blog categories" ON blog_categories FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');

-- Policies for `blog_posts`
DROP POLICY IF EXISTS "Public read access for published blog posts" ON blog_posts;
CREATE POLICY "Public read access for published blog posts" ON blog_posts FOR SELECT USING (is_published = true);
DROP POLICY IF EXISTS "Admins can manage blog posts" ON blog_posts;
CREATE POLICY "Admins can manage blog posts" ON blog_posts FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');

-- Policies for `portfolio_projects`
DROP POLICY IF EXISTS "Public read access for portfolio projects" ON portfolio_projects;
CREATE POLICY "Public read access for portfolio projects" ON portfolio_projects FOR SELECT USING (true);
DROP POLICY IF EXISTS "Admins can manage portfolio projects" ON portfolio_projects;
CREATE POLICY "Admins can manage portfolio projects" ON portfolio_projects FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');

-- Policies for `quiz_responses`
DROP POLICY IF EXISTS "Allow anonymous write access for quiz responses" ON quiz_responses;
CREATE POLICY "Allow anonymous write access for quiz responses" ON quiz_responses FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Admins can read quiz responses" ON quiz_responses;
CREATE POLICY "Admins can read quiz responses" ON quiz_responses FOR SELECT USING (auth.role() = 'service_role');

-- Policies for `contact_submissions`
DROP POLICY IF EXISTS "Allow anonymous write access for contact submissions" ON contact_submissions;
CREATE POLICY "Allow anonymous write access for contact submissions" ON contact_submissions FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Admins can read contact submissions" ON contact_submissions;
CREATE POLICY "Admins can read contact submissions" ON contact_submissions FOR SELECT USING (auth.role() = 'service_role');


-- =============================================
-- SECTION 5: DEFAULT DATA INSERTION
-- =============================================
-- This section populates the database with the initial data from the mock files.

-- Insert Blog Categories
INSERT INTO blog_categories (name) VALUES
    ('Introvert Chronicles'),
    ('Tech Insights'),
    ('Web3 Wizardry'),
    ('AI & Innovation')
ON CONFLICT (name) DO NOTHING;

-- Insert Blog Posts
-- We use a CTE to get category IDs and insert posts.
WITH category_ids AS (
    SELECT id, name FROM blog_categories
)
INSERT INTO blog_posts (slug, title, description, content, image_url, image_hint, category_id, date, reading_time, meta_description, meta_keywords)
VALUES
    (
        'introvert-developer-communication-guide',
        'The Introvert Developer''s Guide to Effective Communication',
        'How to thrive in a team environment by leveraging your strengths as an introvert. Strategies for meetings, feedback, and collaboration.',
        'As an introverted developer, the open-office plans and constant collaboration of the modern tech world can feel like a performance stage we never signed up for. But our quiet nature isn''t a weakness; it''s a superpower in disguise. This guide will help you harness it.

### The Power of Written Communication
Introverts often excel at expressing complex ideas through writing. Use this to your advantage.

- **Prepare for Meetings:** Before a meeting, send out a concise agenda or a document outlining your thoughts. This allows you to shape the conversation before it even begins.
- **Master the Pull Request:** A well-documented pull request is a form of asynchronous communication where you can shine. Clearly explain the "what" and the "why" of your changes.
- **Follow-Up Emails:** Summarize key decisions and action items in a follow-up email after a call. This clarifies your understanding and provides a written record.

### Navigating Synchronous Communication
While writing is our strong suit, real-time interaction is unavoidable. Here''s how to manage it:

1.  **Listen First:** Use your natural tendency to listen and observe. You''ll often pick up on details others miss.
2.  **The Power of the Pause:** Don''t feel pressured to respond immediately. It''s okay to say, "Let me think about that for a moment." A thoughtful answer is always better than a rushed one.
3.  **One-on-One Connections:** Build strong relationships with colleagues in smaller settings. This makes larger group interactions less daunting.

By embracing your introverted qualities and adopting these strategies, you can become a highly effective and respected communicator on any development team.',
        'https://picsum.photos/seed/101/600/400',
        'quiet workspace',
        (SELECT id FROM category_ids WHERE name = 'Introvert Chronicles'),
        '2024-07-20',
        5,
        'Discover strategies for introverted developers to communicate effectively in a team, from mastering written docs to navigating meetings.',
        '{"introvert developer", "communication", "tech team", "collaboration"}'
    ),
    (
        'why-i-chose-nextjs-for-my-portfolio',
        'Why I Chose Next.js for My Mystical Portfolio',
        'A deep dive into the technical decisions behind Wizardfolio, exploring the benefits of Next.js, Server Components, and Vercel.',
        'Building Wizardfolio required a tech stack as versatile and powerful as a wizard''s grimoire. The choice was clear: Next.js. Here''s a look into the magic behind that decision.

### The Spell of Server Components
Next.js''s App Router and the concept of React Server Components (RSCs) were the primary draw. 

- **Performance:** By rendering components on the server by default, we send less JavaScript to the client. This means faster load times and a better user experience, which is crucial for making a great first impression.
- **Direct Data Fetching:** Server Components allow for direct, asynchronous data fetching without needing to create separate API endpoints. This simplified the architecture for features like the blog and portfolio.

### The Potion of a Rich Ecosystem
Next.js is more than just a framework; it''s a thriving ecosystem.

- **Vercel Integration:** The seamless deployment experience with Vercel is unparalleled. Git push, and the site is live with optimized performance.
- **ShadCN UI and Tailwind CSS:** For styling, the combination of Tailwind''s utility-first approach and ShadCN''s beautifully crafted, accessible components allowed for rapid development of a professional and unique UI.
- **Genkit for AI:** With AI being a core part of the "wizard" persona, integrating AI features needed to be straightforward. Genkit''s server-side flows for Gemini were easy to implement within the Next.js architecture.

Next.js provided the perfect blend of developer experience, performance, and scalability to bring the mystical vision of Wizardfolio to life.',
        'https://picsum.photos/seed/102/600/400',
        'code screen',
        (SELECT id FROM category_ids WHERE name = 'Tech Insights'),
        '2024-07-18',
        7,
        'An exploration of why Next.js was the perfect framework for building a high-performance portfolio, focusing on Server Components, Vercel, and the ecosystem.',
        '{"Next.js", "React Server Components", "Vercel", "web development", "portfolio"}'
    ),
    (
        'demystifying-smart-contracts-beginners-grimoire',
        'Demystifying Smart Contracts: A Beginner''s Grimoire',
        'Unlock the magic of blockchain. This guide breaks down what smart contracts are, how they work, and why they matter for the future of the web.',
        'Smart contracts are one of the most enchanting concepts in the Web3 universe. But they aren''t as complex as they sound. Think of them as magical, self-executing agreements written in code.

### What is a Smart Contract?
At its core, a smart contract is a program that runs on a blockchain. It''s a set of promises, defined in code, including how those promises will be fulfilled.

- **If-Then Logic:** They work on simple "if this, then that" logic. For example, *if* a user sends 1 ETH to the contract, *then* the contract sends them a specific NFT.
- **Immutable & Transparent:** Once a smart contract is deployed on the blockchain, it cannot be changed. Its code is visible to everyone, creating a system of trust without a middleman.

### Why Do They Matter?
Smart contracts remove the need for intermediaries, making transactions more efficient and secure.

- **Decentralized Finance (DeFi):** They power lending, borrowing, and trading platforms without a bank.
- **NFTs:** They manage the ownership and transfer of non-fungible tokens.
- **Supply Chain:** They can automatically track and verify the journey of goods from origin to consumer.

Understanding smart contracts is the first step to truly grasping the power of blockchain. They are the building blocks of a more decentralized and automated future.',
        'https://picsum.photos/seed/103/600/400',
        'blockchain network',
        (SELECT id FROM category_ids WHERE name = 'Web3 Wizardry'),
        '2024-07-15',
        8,
        'A beginner-friendly introduction to smart contracts. Learn what they are, how they work on the blockchain, and their real-world applications in DeFi and NFTs.',
        '{"smart contracts", "blockchain", "web3", "ethereum", "NFT"}'
    ),
    (
        'conjuring-with-code-generative-ai-and-development',
        'Conjuring with Code: How Generative AI is Changing Development',
        'Explore the new frontier of software development where AI assists in writing, debugging, and even designing applications. Is it magic?',
        'For developers, generative AI is more than just a chatbot. It''s a powerful apprentice, a tireless collaborator that is fundamentally changing how we build software.

### From Code Completion to Code Generation
Tools like GitHub Copilot have moved beyond simple suggestions. They can now:

- **Scaffold Entire Components:** Give it a prompt like "create a React login form with email and password fields," and it will generate the complete component, including state management and basic styling.
- **Write Tests:** AI can generate unit tests, integration tests, and end-to-end tests, freeing up developers to focus on more complex logic.
- **Translate Languages:** Need to convert a Python script to JavaScript? AI can do that, dramatically reducing the time for cross-language projects.

### The AI-Augmented Workflow
The modern developer workflow is becoming a conversation with an AI.

- **Debugging Partner:** Instead of just staring at an error message, you can paste it into an AI chat and ask for explanations and potential solutions.
- **Architectural Brainstorming:** You can describe a system you want to build and ask the AI to suggest different architectural patterns, their pros, and cons.

Generative AI is not here to replace developers. It''s here to augment our abilities, automate the mundane, and allow us to focus on the creative, problem-solving aspects of our craft. It''s like having a magical grimoire that always has the right spell for the job.',
        'https://picsum.photos/seed/104/600/400',
        'neural network',
        (SELECT id FROM category_ids WHERE name = 'AI & Innovation'),
        '2024-07-12',
        6,
        'Learn how generative AI is transforming software development, from advanced code completion and test generation to being a partner in debugging and design.',
        '{"generative ai", "software development", "ai in coding", "github copilot"}'
    )
ON CONFLICT (slug) DO NOTHING;

-- Insert Portfolio Projects
INSERT INTO portfolio_projects (title, description, image_url, image_hint, tags, "link", display_order)
VALUES
    (
        'DeFi Dashboard',
        'A comprehensive dashboard for tracking and managing assets across multiple decentralized finance protocols. Real-time data and intuitive visualizations.',
        'https://picsum.photos/seed/201/600/400',
        'finance dashboard',
        '{"Web3", "Next.js", "Ethers.js"}',
        'https://github.com/firebase/studio',
        1
    ),
    (
        'Artisan Goods Marketplace',
        'An elegant e-commerce platform for artisans to sell their creations. Features a custom checkout flow and vendor management system.',
        'https://picsum.photos/seed/202/600/400',
        'artisan products',
        '{"Web Dev", "React", "Node.js"}',
        NULL,
        2
    ),
    (
        'AI Content Generator',
        'A SaaS tool that uses generative AI to help writers overcome creative blocks and produce content briefs. Integrated with the latest language models.',
        'https://picsum.photos/seed/203/600/400',
        'ai tool',
        '{"AI", "Next.js", "SaaS"}',
        'https://github.com/firebase/studio',
        3
    ),
    (
        'Generative Art NFT Marketplace',
        'A platform for minting and trading generative art NFTs. Features a unique auction system and artist-centric royalty structures.',
        'https://picsum.photos/seed/204/600/400',
        'art gallery',
        '{"Web3", "NFT", "Solidity"}',
        NULL,
        4
    )
ON CONFLICT (title) DO NOTHING; -- Assuming title is unique for portfolio projects

-- Print completion message
SELECT 'Supabase setup script completed successfully.' AS message;
